#!/sbin/sh -x

# Breakfast Kernel Installer.
# Copyright (C) 2017-2018, Alex Saiko <solcmdr@gmail.com>
#
# This product includes code parts from The Normandy Project.
# Copyright (C) 2017, Kutep0v.
#
# This product includes software developed at
# The Coding Code Mobile Technology LLC (http://www.supersu.com/). 
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

OUTFD=$2
ZIP=$3

BREAKFAST="/breakfast"
INITRAMFS="$BREAKFAST/initramfs"
BF_KERNEL="$BREAKFAST/kernel"
BF_TOOLS="$BF_KERNEL/tools"
BF_THERMAL="$BF_KERNEL/thermal"
BF_RAMPARTS="$BF_KERNEL/ramparts"

ui_print() { printf "ui_print $1\nui_print\n" >> /proc/self/fd/$OUTFD; }

is_mounted()
{
	[ ! -z "$2" ] &&
	cat /proc/mounts | grep $1 | grep $2, >/dev/null ||
	cat /proc/mounts | grep $1 >/dev/null

	return $?
}

terminate()
{
	# Make a proper cleanup.
	cd / && rm -rf $BREAKFAST
	(is_mounted /system) && umount /system

	case "$1" in
	 0) msg="- Done!";;
	 1) msg="- ! This kernel is compatible with $TARGET only.";;
	 2) msg="- ! This kernel is not compatible with your ROM.";;
	 3) msg="- ! Unable to find a boot block.";;
	 4) msg="- ! Unable to dump a boot block.";;
	 5) msg="- ! Unable to write a new boot block.";;
	 6) msg="- ! Unable to mount system block.";;
	 7) msg="- ! Unable to find Breakfast configuration file.";;
	 8) msg="- ! Unable to load Breakfast configuration file.";;
	 9) msg="- ! Unable to change permissions of binary tools.";;
	10) msg="- ! Unable to get device property.";;
	11) msg="- ! Unable to get build.prop property.";;
	12) msg="- ! Unable to find Breakfast installer resources.";;
	 *) msg="- ! Internal error occured.";;
	esac

	[ "$1" -eq "0" ] || ui_print " "
	ui_print "$msg"
	ui_print " "

	exit $1
}

mount_system()
{
	# There is no point in remounting the already mounted system.
	(is_mounted /system rw) && return 0

	mount -o rw /system
	mount -o rw,remount /system

	# Return early if system has been successfully mounted.
	(is_mounted /system rw) && return 0

	# If generic calls didn't help, try to mount system meticulously.
	for i in $(cat /etc/recovery.fstab | grep -v "#" | grep "/system"); do
		[ -z ${POINT+x} ] && POINT=$i && continue
		[ -z ${FS+x} ] && FS=$i && continue
		[ -z ${DEV+x} ] && DEV=$i && break
	done

	[ ! -z ${POINT+x} ] && [ ! -z ${FS+x} ] && [ ! -z ${DEV+x} ] && (
	(! is_mounted /system rw) && mount -t $FS -o rw $DEV $POINT
	(! is_mounted /system rw) && mount -t $FS -o rw,remount $DEV $POINT)
	[ "$?" -eq "0" ] && (is_mounted /system rw) || terminate 6
}

config_loaded()
{
	# Check whether all the required variables are actually set.
	[ ! -z ${TARGET+x} ] && [ ! -z ${KERNEL_IMAGE+x} ] &&
	[ ! -z ${API_LOWER+x} ] && [ ! -z ${API_UPPER+x} ] &&
	[ ! -z ${MPDECISION+x} ] && [ ! -z ${THERMAL_ENGINE+x} ] &&
	[ ! -z ${THERMAL_CONFIG+x} ] && [ ! -z ${POWER_HAL+x} ] &&
	return 0 || return 1
}

init_installation()
{
	# Regenerate Breakfast directory.
	rm -rf $BREAKFAST && mkdir $BREAKFAST && cd $BREAKFAST

	# Extract kernel package into the directory recreated above.
	unzip -o "$ZIP"

	# Ensure Breakfast resources are present.
	[ -d "$BF_KERNEL" ] && [ -d "$BF_TOOLS" ] || terminate 12

	# Try to load Breakfast installer configuration.
	[ -r "$BF_KERNEL/config.sh" ] || terminate 7
	source $BF_KERNEL/config.sh

	# Ensure the configuration was loaded.
	(config_loaded) || terminate 8

	# Assign "executable" bits to binary tools.
	for file in unpack mk; do chmod 0750 $BF_TOOLS/${file}bootimg; done
	[ "$?" -eq "0" ] || terminate 9
}

check_model_id()
{
	HW=$(getprop "ro.product.device")
	[ "$?" -eq "0" ] || terminate 10

	HW_NAME=$(getprop "ro.product.model")
	[ "$?" -eq "0" ] || terminate 10

	# Compare a gathered hardware identificator with the specified one.
	[ "$HW" == "$TARGET" ] || terminate 1
	ui_print "- Model ID - $HW_NAME ($HW)"
}

getbprop()
{
	[ ! -z $1 ] || return 1
	sed -n "s/^$1=//p" "/system/build.prop" 2>/dev/null | head -n 1
}

check_compatibility()
{
	# A system block must be mounted before manipulating with system files.
	mount_system

	# Ensure required system blobs are in place.
	for file in $MPDECISION $THERMAL_ENGINE; do
		[ -f "$file" ] || terminate 2
	done

	# PowerHAL may be ommitted, which is suboptimal, though.
	[ -f "$POWER_HAL" ] ||
	(ui_print "- ! PowerHAL is not found." &&
	 ui_print "- ! Kernel may not work properly.")

	# Ensure the kernel is compatible with device's API level.
	API=$(getbprop "ro.build.version.sdk")
	[ "$?" -eq "0" ] || terminate 11

	[ "$API" -ge "$API_LOWER" ] && [ "$API" -le "$API_UPPER" ] ||
	terminate 2

	# Unmount system block as all the work has been done.
	(is_mounted /system) && umount /system
}

dump_boot_image()
{
	# Try to parse boot image block name from fs table.
	BOOTIMAGE=$(grep -v '#' /etc/recovery.fstab |	\
		    grep -E '/boot[^a-zA-Z]' |		\
		    grep -oE '/dev/[a-zA-Z0-9_./-]*')
	[ ! -z $BOOTIMAGE ] || terminate 3

	# Copy boot block to a temporary directory.
	/sbin/busybox dd if="$BOOTIMAGE" of="$BREAKFAST/boot.img"
	[ "$?" -eq "0" ] || terminate 4

	# Unpack boot block to gather its initramfs partition.
	$BF_TOOLS/unpackbootimg -i "$BREAKFAST/boot.img" -o "$BREAKFAST"
}

put_into_initramfs()
{
	[ -f $BF_RAMPARTS/$1 ] && [ ! -z $2 ] && [ ! -z $3 ] || return 1
	mv -f $BF_RAMPARTS/$1 $INITRAMFS/$2 && chmod $3 $INITRAMFS/$2
}

prepare_initramfs()
{
	# Regenerate target initramfs subdir.
	rm -rf $INITRAMFS && mkdir $INITRAMFS && cd $INITRAMFS

	# Move extracted initramfs image there and uncpio it.
	mv $BREAKFAST/boot.img-ramdisk.gz . &&
	gunzip -c boot.img-ramdisk.gz | cpio -i && rm boot.img-ramdisk.gz

	# Run compatibility modes on other Android variations.
	P=""
	[ "$API" -ge "24" ] && [ "$API" -le "25" ] && P="_n" &&
	ui_print "- ! Android Nougat Compatibility Mode"

	# Put modified device-specific init scripts into target initramfs.
	put_into_initramfs "init.${TARGET}$P.rc" "init.$TARGET.rc" "750"
	put_into_initramfs "fstab.$TARGET" "fstab.$TARGET" "640"

	# Cpio initramfs image again and clean up.
	find . | cpio -o -H newc | gzip > $BREAKFAST/boot.img-ramdisk.gz
	cd $BREAKFAST && rm -rf $INITRAMFS
}

create_boot_image()
{
	# Set up a command line to be passed to mkbootimg binary tool.
	COMMAND_LINE="
	$BF_TOOLS/mkbootimg						  \
	--kernel		\"$BF_KERNEL/$KERNEL_IMAGE\"		  \
	--ramdisk		\"$BREAKFAST/boot.img-ramdisk.gz\"	  \
	--cmdline		\"$(cat $BREAKFAST/boot.img-cmdline)\"	  \
	--board			\"$(cat $BREAKFAST/boot.img-board)\"	  \
	--base			\"$(cat $BREAKFAST/boot.img-base)\"	  \
	--pagesize		\"$(cat $BREAKFAST/boot.img-pagesize)\"	  \
	--kernel_offset		\"$(cat $BREAKFAST/boot.img-kerneloff)\"  \
	--ramdisk_offset	\"$(cat $BREAKFAST/boot.img-ramdiskoff)\" \
	--second_offset		\"$(cat $BREAKFAST/boot.img-secondoff)\"  \
	--tags_offset		\"$(cat $BREAKFAST/boot.img-tagsoff)\"	  \
	--hash			\"$(cat $BREAKFAST/boot.img-hash)\"	  \
	--output		\"$BREAKFAST/breakfast.img\""

	# Create a temporary script with a command line above and execute it.
	printf "#!/sbin/sh\n$COMMAND_LINE" > $BREAKFAST/createnewboot.sh
	chmod 750 $BREAKFAST/createnewboot.sh && $BREAKFAST/createnewboot.sh
}

install_kernel()
{
	# Try to write a new boot image to the appropriate partition.
	/sbin/busybox dd if="$BREAKFAST/breakfast.img" of="$BOOTIMAGE"
	[ "$?" -eq "0" ] || terminate 5
}

replace_thermal_config()
{
	# Ensure thermal configuration is set in installer configuration.
	TCFG=$(printf "$THERMAL_CONFIG" 2>/dev/null | sed 's/.*\///g')
	[ ! -z ${TCFG+x} ] &&
	[ -d "$BF_THERMAL" ] && [ -f "$BF_THERMAL/$TCFG" ] || return 1

	# A system block must be mounted before manipulating with system files.
	mount_system

	ui_print "- Replacing thermal config..."

	# Replace system thermal configuration file with a modified one.
	mv -f $BF_THERMAL/$TCFG $THERMAL_CONFIG 2>/dev/null

	# Set up security owner, mode and context.
	chown 0:0 $THERMAL_CONFIG
	chmod 0644 $THERMAL_CONFIG
	chcon "u:object_r:system_file:s0" $THERMAL_CONFIG

	# Unmount system block as all the work has been done.
	(is_mounted /system) && umount /system
}

init_installation

ui_print " "
ui_print "----- Breakfast Kernel"
ui_print "--- Device: $TARGET"
ui_print " "

ui_print "- Checking Model ID..."
check_model_id

ui_print "- Checking compatibility..."
check_compatibility

ui_print "- Dumping current boot image..."
dump_boot_image

ui_print "- Preparing initramfs..."
prepare_initramfs

ui_print "- Generating new boot image..."
create_boot_image

ui_print "- Installing kernel..."
install_kernel

# Try to replace thermal configuration if there is any.
replace_thermal_config

# All the work is done. Terminating for now.
terminate 0
